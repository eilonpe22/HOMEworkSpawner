//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Scripts/SpawnControlls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SpawnControlls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SpawnControlls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SpawnControlls"",
    ""maps"": [
        {
            ""name"": ""Spawner"",
            ""id"": ""14b88cde-0803-42c0-8ef8-7da05bb217a9"",
            ""actions"": [
                {
                    ""name"": ""spawen"",
                    ""type"": ""PassThrough"",
                    ""id"": ""6643ddcf-730e-4931-834e-071afe5ae1f0"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""dedb48bc-a0ca-4a0f-b890-8a5c034a5419"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""spawen"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player"",
            ""id"": ""efa6bd96-a4b1-4a94-ad65-b54744ebd8fe"",
            ""actions"": [
                {
                    ""name"": ""PPspawn"",
                    ""type"": ""PassThrough"",
                    ""id"": ""500f87a6-20ec-4a0b-be6a-76a2b60c7923"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b3ed2478-7f80-4cf3-91d9-1fddbf4f2f7c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PPspawn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Spawner
        m_Spawner = asset.FindActionMap("Spawner", throwIfNotFound: true);
        m_Spawner_spawen = m_Spawner.FindAction("spawen", throwIfNotFound: true);
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_PPspawn = m_Player.FindAction("PPspawn", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Spawner
    private readonly InputActionMap m_Spawner;
    private ISpawnerActions m_SpawnerActionsCallbackInterface;
    private readonly InputAction m_Spawner_spawen;
    public struct SpawnerActions
    {
        private @SpawnControlls m_Wrapper;
        public SpawnerActions(@SpawnControlls wrapper) { m_Wrapper = wrapper; }
        public InputAction @spawen => m_Wrapper.m_Spawner_spawen;
        public InputActionMap Get() { return m_Wrapper.m_Spawner; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SpawnerActions set) { return set.Get(); }
        public void SetCallbacks(ISpawnerActions instance)
        {
            if (m_Wrapper.m_SpawnerActionsCallbackInterface != null)
            {
                @spawen.started -= m_Wrapper.m_SpawnerActionsCallbackInterface.OnSpawen;
                @spawen.performed -= m_Wrapper.m_SpawnerActionsCallbackInterface.OnSpawen;
                @spawen.canceled -= m_Wrapper.m_SpawnerActionsCallbackInterface.OnSpawen;
            }
            m_Wrapper.m_SpawnerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @spawen.started += instance.OnSpawen;
                @spawen.performed += instance.OnSpawen;
                @spawen.canceled += instance.OnSpawen;
            }
        }
    }
    public SpawnerActions @Spawner => new SpawnerActions(this);

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_PPspawn;
    public struct PlayerActions
    {
        private @SpawnControlls m_Wrapper;
        public PlayerActions(@SpawnControlls wrapper) { m_Wrapper = wrapper; }
        public InputAction @PPspawn => m_Wrapper.m_Player_PPspawn;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @PPspawn.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPPspawn;
                @PPspawn.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPPspawn;
                @PPspawn.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPPspawn;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PPspawn.started += instance.OnPPspawn;
                @PPspawn.performed += instance.OnPPspawn;
                @PPspawn.canceled += instance.OnPPspawn;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface ISpawnerActions
    {
        void OnSpawen(InputAction.CallbackContext context);
    }
    public interface IPlayerActions
    {
        void OnPPspawn(InputAction.CallbackContext context);
    }
}
